package com.example.zte.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GROUP_MEMBER".
*/
public class GroupMemberDao extends AbstractDao<GroupMember, Void> {

    public static final String TABLENAME = "GROUP_MEMBER";

    /**
     * Properties of entity GroupMember.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UserId = new Property(0, String.class, "userId", false, "USER_ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property PortraitUri = new Property(2, String.class, "portraitUri", false, "PORTRAIT_URI");
        public final static Property GroupId = new Property(3, String.class, "groupId", false, "GROUP_ID");
        public final static Property DisplayName = new Property(4, String.class, "displayName", false, "DISPLAY_NAME");
        public final static Property NameSpelling = new Property(5, String.class, "nameSpelling", false, "NAME_SPELLING");
        public final static Property DisplayNameSpelling = new Property(6, String.class, "displayNameSpelling", false, "DISPLAY_NAME_SPELLING");
        public final static Property GroupName = new Property(7, String.class, "groupName", false, "GROUP_NAME");
        public final static Property GroupNameSpelling = new Property(8, String.class, "groupNameSpelling", false, "GROUP_NAME_SPELLING");
        public final static Property GroupPortrait = new Property(9, String.class, "groupPortrait", false, "GROUP_PORTRAIT");
    }


    public GroupMemberDao(DaoConfig config) {
        super(config);
    }
    
    public GroupMemberDao(DaoConfig config, WechatDaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GROUP_MEMBER\" (" + //
                "\"USER_ID\" TEXT," + // 0: userId
                "\"NAME\" TEXT," + // 1: name
                "\"PORTRAIT_URI\" TEXT," + // 2: portraitUri
                "\"GROUP_ID\" TEXT," + // 3: groupId
                "\"DISPLAY_NAME\" TEXT," + // 4: displayName
                "\"NAME_SPELLING\" TEXT," + // 5: nameSpelling
                "\"DISPLAY_NAME_SPELLING\" TEXT," + // 6: displayNameSpelling
                "\"GROUP_NAME\" TEXT," + // 7: groupName
                "\"GROUP_NAME_SPELLING\" TEXT," + // 8: groupNameSpelling
                "\"GROUP_PORTRAIT\" TEXT);"); // 9: groupPortrait
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GROUP_MEMBER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GroupMember entity) {
        stmt.clearBindings();
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(1, userId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String portraitUri = entity.getPortraitUri();
        if (portraitUri != null) {
            stmt.bindString(3, portraitUri);
        }
 
        String groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindString(4, groupId);
        }
 
        String displayName = entity.getDisplayName();
        if (displayName != null) {
            stmt.bindString(5, displayName);
        }
 
        String nameSpelling = entity.getNameSpelling();
        if (nameSpelling != null) {
            stmt.bindString(6, nameSpelling);
        }
 
        String displayNameSpelling = entity.getDisplayNameSpelling();
        if (displayNameSpelling != null) {
            stmt.bindString(7, displayNameSpelling);
        }
 
        String groupName = entity.getGroupName();
        if (groupName != null) {
            stmt.bindString(8, groupName);
        }
 
        String groupNameSpelling = entity.getGroupNameSpelling();
        if (groupNameSpelling != null) {
            stmt.bindString(9, groupNameSpelling);
        }
 
        String groupPortrait = entity.getGroupPortrait();
        if (groupPortrait != null) {
            stmt.bindString(10, groupPortrait);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GroupMember entity) {
        stmt.clearBindings();
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(1, userId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String portraitUri = entity.getPortraitUri();
        if (portraitUri != null) {
            stmt.bindString(3, portraitUri);
        }
 
        String groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindString(4, groupId);
        }
 
        String displayName = entity.getDisplayName();
        if (displayName != null) {
            stmt.bindString(5, displayName);
        }
 
        String nameSpelling = entity.getNameSpelling();
        if (nameSpelling != null) {
            stmt.bindString(6, nameSpelling);
        }
 
        String displayNameSpelling = entity.getDisplayNameSpelling();
        if (displayNameSpelling != null) {
            stmt.bindString(7, displayNameSpelling);
        }
 
        String groupName = entity.getGroupName();
        if (groupName != null) {
            stmt.bindString(8, groupName);
        }
 
        String groupNameSpelling = entity.getGroupNameSpelling();
        if (groupNameSpelling != null) {
            stmt.bindString(9, groupNameSpelling);
        }
 
        String groupPortrait = entity.getGroupPortrait();
        if (groupPortrait != null) {
            stmt.bindString(10, groupPortrait);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public GroupMember readEntity(Cursor cursor, int offset) {
        GroupMember entity = new GroupMember( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // userId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // portraitUri
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // groupId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // displayName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // nameSpelling
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // displayNameSpelling
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // groupName
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // groupNameSpelling
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // groupPortrait
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GroupMember entity, int offset) {
        entity.setUserId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPortraitUri(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGroupId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDisplayName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNameSpelling(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDisplayNameSpelling(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setGroupName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setGroupNameSpelling(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setGroupPortrait(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(GroupMember entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(GroupMember entity) {
        return null;
    }

    @Override
    public boolean hasKey(GroupMember entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
